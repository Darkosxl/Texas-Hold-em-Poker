import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import javax.swing.JFrame;
import javax.swing.JTextArea;
import javax.swing.JPanel;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.net.ServerSocket;
import java.net.Socket;
import java.io.IOException;

public class HoldemFrame extends JFrame
{
 private HoldemMenu menu;
 private ServerMenu svmenu;
 private ClientMenu cnmenu;
 
 private HoldemRaise raiser;
 private HoldemJoin connector;
 private HoldemCreator creator;
 
 private int screen;
 private int menuchooser;
 private boolean firsttime;
 public HoldemFrame()
 {
  menuchooser = 1;
  firsttime = true;
  screen = 1; 
  this.setSize(1920,1080);
  menu = new HoldemMenu(screen,5,"Warro");
  menu.addMouseListener(new HoldemListener());
  this.add(menu);
   svmenu = new ServerMenu(6,1,9999,"Büyük Peder");
   cnmenu = new ClientMenu(6,1,9999,"client1");
  raiser = new HoldemRaise(menu.getP1Budget(),100);
  connector = new HoldemJoin();
  creator = new HoldemCreator();
  connector.addWindowListener(new ButtonListener());
  creator.addWindowListener(new ButtonListener());
  raiser.addWindowListener(new ButtonListener());
  /*
  menu.setLayout(new GridLayout(4,1));
  JPanel fill1 = new JPanel();
  JPanel fill2 = new JPanel();
  JPanel fill3 = new JPanel();
  JPanel fill4 = new JPanel();
  
  //smaller sections JPANELIN ANASINI SÝKÝYÝM
  
  JPanel fill5 = new JPanel();
  JPanel fill6 = new JPanel();
  JPanel fill7 = new JPanel();
  JPanel fill8 = new JPanel();
  JPanel fill9 = new JPanel();
  JPanel fill10 = new JPanel();
  
  fill1.setVisible(false);
  fill3.setVisible(false);
  fill5.setVisible(false);
  fill7.setVisible(false);
  fill8.setVisible(false);
  fill10.setVisible(false);
  
  fill2.add(fill5);
  fill2.add(fill6);
  fill2.add(fill7);
  
  fill4.add(fill8);
  fill4.add(fill9);
  fill4.add(fill10);
  
  
  
  fill2.setLayout(new GridLayout(1,3));
  fill4.setLayout(new GridLayout(1,3));
  
  JTextArea portbox = new JTextArea();
  JTextArea adressbox = new JTextArea();
  fill6.add(adressbox);
  fill10.add(portbox);
  
            
  adressbox.setBackground(menu.getBackground());
  portbox.setBackground(menu.getBackground());
//textarea.setVisible(false);
  menu.add(fill1);
  menu.add(fill2);
  menu.add(fill3);
  menu.add(fill4);
  */
 }
 class ButtonListener implements WindowListener
 {
  public void windowDeactivated(WindowEvent we)
  {}
  public void windowActivated(WindowEvent we)
  {}
  public void windowDeiconified(WindowEvent we)
  {}
  public void windowIconified(WindowEvent we)
  {}
  public void windowOpened(WindowEvent we)
  {}
  public void windowClosing(WindowEvent we)
  {}
  public void windowClosed(WindowEvent we)
   {
    if(we.getSource() == raiser)
    {
    // this gets the latest color and solution that was set in the buttons of colorframe
    // and designates that as the current colors
    menu.setRaisedAmount(raiser.returnRaise());
    menu.setAction("raise");
    if(raiser.getDecision())
    menu.playOneRound();
    HoldemFrame.this.repaint();
    }
    if(we.getSource() == connector)
    {
     if(connector.ifEnabled())
     {
      final int HOLDEM_JOIN = connector.getPort();
      final String NAME = connector.getName();
//TODO : figure out how to get the number of players expected from the main server
      //Oh and, do the server room please??
//cnmenu = new ClientMenu = (6,,HOLDEM_JOIN,NAME);
      HoldemFrame.this.remove(menu);
      HoldemFrame.this.add(cnmenu);
      menuchooser = 3;
     }
     
    }
    if(we.getSource() == creator)
    {
     System.out.println("Uh???");
       System.out.println("Uh???");
       System.out.println("Uh???");
      if(creator.ifEnabled())
      {
      try
      {  
       
       final int PLAYER_AMOUNT = creator.getPlayers();
       int playernum = 1;
       final int HOLDEM_PORT = creator.getPort();
       final String NAME = creator.getName();
       svmenu = new ServerMenu(7,PLAYER_AMOUNT,HOLDEM_PORT,NAME);
       ServerSocket server = new ServerSocket(HOLDEM_PORT);
       System.out.println("Waiting for players to join");
       HoldemFrame.this.remove(menu);
       HoldemFrame.this.add(svmenu);
       menuchooser = 2;
       //svmenu.setScreen(7);
       //HoldemFrame.this.repaint();
       //Now 'fore you rage and regret brother
       //realize that you need to open the server from the game object
       // otherwise the while loop fucks over the game itself real bad
       // you do you, just do this, game.openBeacon(port,playeramount,name(??));
       //then repaint this fucker, you can even probably get rid of servermenu and clientmenu
       //rather clientgame and servergame
       while(true && playernum <= PLAYER_AMOUNT)
       {
       try(Socket s = server.accept())
       {
        System.out.println("Player "+playernum+" connected.");
        playernum++;
       }
       playernum++;
       System.out.println("in finite loop");
      }
       System.out.println("I'm done with the server");
     
      //menu setscreen(6) olacak bu, burada bir þeye yaramaz öbür türlü
    }
      catch(IOException ioe)
     {
      System.out.println("The port is not available"); 
     }
   }
  }
  }
 }
 class HoldemListener implements MouseListener
 {
  public void mouseExited(MouseEvent me)
  {}
  public void mouseEntered(MouseEvent me)
  {
  // if(screen <5)
   menu.checkPos(me.getX(),me.getY());
   HoldemFrame.this.repaint();
  }
  public void mouseClicked(MouseEvent me)
  {  
  // if(screen < 5)
   System.out.println("Mouse pressed: "+me.getX()+ " y: "+me.getY());
   if(menuchooser == 1)
   menu.pressOption(me.getX(),me.getY());
   else if(menuchooser == 2)
   svmenu.pressOption(me.getX(),me.getY());
   else if(menuchooser == 3)
   cnmenu.pressOption(me.getX(),me.getY());
   screen = menu.getScreen();
   
   if(menu.holdemraise() || cnmenu.holdemraise() || svmenu.holdemraise())
    {
    raiser.setVisible(true);
   }
   else if(menu.holdemjoin())
    {
    connector = new HoldemJoin();
    connector.addWindowListener(new ButtonListener());
    connector.setVisible(true);
   }
   else if(menu.holdemcreate())
   { 
    creator = new HoldemCreator();
    creator.addWindowListener(new ButtonListener());
    creator.setVisible(true);
   }
   else
   {
    raiser.setVisible(false); 
    connector.setVisible(false); 
    creator.setVisible(false); 
   }
   raiser.setMax(menu.getP1Budget());
   raiser.setMin(100);
   HoldemFrame.this.repaint();
  }  
  public void mousePressed(MouseEvent me)
  {}
  public void mouseReleased(MouseEvent me)
  {}
 }
 
}
